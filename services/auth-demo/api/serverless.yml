# For full config options, check the docs:
#    docs.serverless.com

service: auth-demo-users

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  environment:
    USERS_TABLE: ${env:USERS_TABLE, '${self:service}-${opt:stage, self:provider.stage}'}
    USER_STORE_API_SECURED_ISSUER: ${env:USER_STORE_API_SECURED_ISSUER}
    USER_STORE_API_ACCESS_CONTROL_ALLOW_ORIGIN: ${env:USER_STORE_API_ACCESS_CONTROL_ALLOW_ORIGIN}
  tracing:
    apiGateway: true
  usagePlan:
    quota:
      limit: 1000
      period: DAY
    throttle:
      burstLimit: 5
      rateLimit: 3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

#Package individually so that each function is smaller (i.e. tiny bit quicker startup!!!)
package:
  individually: true

functions:
  - get:
      handler: src/handlers/user/get.handler
      events:
        - http: 
            method: get 
            path: /user/{id}
            authorizer: authorizer
            cors:
              origin: ${env:USER_STORE_API_ACCESS_CONTROL_ALLOW_ORIGIN}
              headers:
                - Authorization
                - Content-Type
              allowCredentials: false
  - put:
      handler: src/handlers/user/put.handler
      events:
        - http: 
            method: put
            path: /user/{id}
            authorizer: authorizer
            cors:
              origin: ${env:USER_STORE_API_ACCESS_CONTROL_ALLOW_ORIGIN}
              headers:
                - Authorization
                - Content-Type
              allowCredentials: false
  - authorizer:
      handler: src/handlers/authorizer/authorizer.handler
      type: TOKEN
      identitySource: method.request.header.Authorization
      identityValidationExpression: Bearer (.*)

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${env:USER_STORE_API_ACCESS_CONTROL_ALLOW_ORIGIN}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Authorization,Content-Type'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${opt:stage, self:provider.stage}"

custom:
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  serverless-offline:
    host: 0.0.0.0
    port: 3003
